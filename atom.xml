<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简客-记忆</title>
  
  <subtitle>抽象的才是永恒的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jk-kj.com/"/>
  <updated>2018-03-28T03:34:36.126Z</updated>
  <id>http://www.jk-kj.com/</id>
  
  <author>
    <name>hottredpen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用阿里云邮件推送实现SMTP发送邮件</title>
    <link href="http://www.jk-kj.com/2018/03/28/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E5%AE%9E%E7%8E%B0SMTP%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://www.jk-kj.com/2018/03/28/使用阿里云邮件推送实现SMTP发送邮件/</id>
    <published>2018-03-28T03:05:35.000Z</published>
    <updated>2018-03-28T03:34:36.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>一个wordpress项目里的自带的邮件（代发）发送邮件不稳定。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>WordPress 使用阿里云邮件推送实现SMTP发送邮件<br><a href="https://www.wpdaxue.com/wordpress-aliyun-smtp.html" target="_blank" rel="external">https://www.wpdaxue.com/wordpress-aliyun-smtp.html</a></p><h3 id="来自第三方的介绍"><a href="#来自第三方的介绍" class="headerlink" title="来自第三方的介绍"></a>来自第三方的介绍</h3><p>6、切换到“发信地址”界面，新建发信地址：<br>现在很多虚拟主机都是默认不支持 mail() 函数发送邮件的，不过一般都提供 smtp 发件支持。要找一个好用的 smtp 发送邮件方可不容易，不是发件数量限制太小，就是经常被判为垃圾邮件。所以倡萌此前一直在服务器搭建邮件发送功能，并想办法优化提高邮件可行度，避免被判为垃圾邮件，但效果还是不太理想。前些天，想起了阿里云的邮件推送服务，并进行了测试，发现真的不错哦。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、要了解和开通阿里云邮件推送服务，请查看：<a href="https://www.aliyun.com/product/directmail" target="_blank" rel="external">https://www.aliyun.com/product/directmail</a></p><p>2、开通以后，在控制台进入“发信域名”新建域名<br>阿里云里提示最好用二级域名，但是service@email.jk-kj.com类似的邮箱还是会被某些插件不认可。最后我还是用上了service@jk-kj.com<br>3、添加域名后，点击配置，可以查看到域名配置信息<br>4、按照域名配置信息的提示，到你的域名解析后台添加3条解析记录：<br>5、添加完解析记录，回到阿里云后台，点击“验证”，返回“验证通过”说明解析生效：<br>6、切换到“发信地址”界面，新建发信地址：<br>7、选择刚才添加的发信域名，然后输入你要使用的账号，输入回信地址，选择发信类型：批量邮件<br>注：发信类型有：<br>触发邮件：注册确认、订单确认、密码重置、交易通知等<br>批量邮件：自有用户的产品促销、期刊订阅等<br>但是有些用户反馈，触发邮件方式不太稳定，你可以根据自己的实际选择吧，这里我选择的是批量邮件<br>8、添加完返回到界面，点击“验证回信地址”，然后会发送邮件到你的回信地址，到你的邮件箱点击邮件的链接验证通过即可，注意哦，验证邮件可能在垃圾箱里。然后设置SMTP 密码。<br>9、完成上面的步骤后，阿里云的邮件推送的SMTP发送功能就设置好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;一个wordpress项目里的自带的邮件（代发）发送邮件不稳定。&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="邮件" scheme="http://www.jk-kj.com/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySql按周，按月，按日分组统计数据</title>
    <link href="http://www.jk-kj.com/2018/03/19/MySql%E6%8C%89%E5%91%A8%EF%BC%8C%E6%8C%89%E6%9C%88%EF%BC%8C%E6%8C%89%E6%97%A5%E5%88%86%E7%BB%84%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE/"/>
    <id>http://www.jk-kj.com/2018/03/19/MySql按周，按月，按日分组统计数据/</id>
    <published>2018-03-19T06:25:08.000Z</published>
    <updated>2018-03-28T03:02:38.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前开发微信时，做过类似的简单统计。那时对于mysql的理解比较浅，有些数据都是预先存入数据去实现的。这时就会出现多个时间，比如create_time  create_date。<br>现在开发开单宝的统计，特意搜索了一下关于统计时mysql处理的文章</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>MySql按周，按月，按日分组统计数据<br><a href="https://blog.csdn.net/lqclh502/article/details/50157483" target="_blank" rel="external">https://blog.csdn.net/lqclh502/article/details/50157483</a><br>MySQL中distinct和count(*)的使用方法比较<br><a href="http://www.jb51.net/article/74559.htm" target="_blank" rel="external">http://www.jb51.net/article/74559.htm</a></p><h3 id="几个关键词"><a href="#几个关键词" class="headerlink" title="几个关键词"></a>几个关键词</h3><h4 id="网上的资料"><a href="#网上的资料" class="headerlink" title="网上的资料"></a>网上的资料</h4><p>关键词：<code>DATE_FORMAT</code><br>对时间进行格式化<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select DATE_FORMAT(create_time,&apos;%Y%u&apos;) weeks,count(caseid) count from tc_case group by weeks;</div><div class="line"></div><div class="line">select DATE_FORMAT(create_time,&apos;%Y%m%d&apos;) days,count(caseid) count from tc_case group by days;</div><div class="line"></div><div class="line">select DATE_FORMAT(create_time,&apos;%Y%m&apos;) months,count(caseid) count from tc_case group by months;</div></pre></td></tr></table></figure></p><p>DATE_FORMAT(date,format)</p><p>根据format字符串格式化date值。下列修饰符可以被用在format字符串中：</p><p>%M 月名字(January……December)<br>%W 星期名字(Sunday……Saturday)<br>%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）<br>%Y 年, 数字, 4 位<br>%y 年, 数字, 2 位<br>%a 缩写的星期名字(Sun……Sat)<br>%d 月份中的天数, 数字(00……31)<br>%e 月份中的天数, 数字(0……31)<br>%m 月, 数字(01……12)<br>%c 月, 数字(1……12)<br>%b 缩写的月份名字(Jan……Dec)<br>%j 一年中的天数(001……366)<br>%H 小时(00……23)<br>%k 小时(0……23)<br>%h 小时(01……12)<br>%I 小时(01……12)<br>%l 小时(1……12)<br>%i 分钟, 数字(00……59)<br>%r 时间,12 小时(hh:mm:ss [AP]M)<br>%T 时间,24 小时(hh:mm:ss)<br>%S 秒(00……59)<br>%s 秒(00……59)<br>%p AM或PM<br>%w 一个星期中的天数(0=Sunday ……6=Saturday ）<br>%U 星期(0……52), 这里星期天是星期的第一天<br>%u 星期(0……52), 这里星期一是星期的第一天<br>%% 一个文字“%”</p><h4 id="动手实战"><a href="#动手实战" class="headerlink" title="动手实战"></a>动手实战</h4><p>网上写的是DATE类型的字段的处理，可是我习惯用int类型的时间戳保存时间<br>需要改进一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DATE_FORMAT( FROM_UNIXTIME(create_time),&apos;%Y-%m-%d&apos; ) AS  days</div><div class="line">DATE_FORMAT( FROM_UNIXTIME(create_time),&apos;%Y-%m&apos; ) AS  months</div><div class="line">DATE_FORMAT( FROM_UNIXTIME(create_time),&apos;%u&apos; ) AS  weeks</div></pre></td></tr></table></figure></p><p>接下来只要对 days months weeks进group就OK<br>thinkphp下的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$list = M(&quot;Order&quot;)</div><div class="line">        -&gt;field(&quot; DATE_FORMAT( FROM_UNIXTIME(create_time),&apos;%Y-%m-%d&apos; ) AS  days, SUM(total_money) total_money_count , COUNT( DISTINCT customer_id ) AS customer_id_count , COUNT( id ) AS order_count&quot;)</div><div class="line">        -&gt;where($newmap)</div><div class="line">        -&gt;group(&apos; days &apos;)</div><div class="line">        -&gt;select();</div></pre></td></tr></table></figure></p><p>关键词：<code>DISTINCT</code><br>在count不重复的记录的时候就能用到它，<br>上面的代码里就用到了<code>COUNT( DISTINCT customer_id ) AS customer_id_count</code>,有了这个关键词，就不用以前的笨方法了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;之前开发微信时，做过类似的简单统计。那时对于mysql的理解比较浅，有些数据都是预先存入数据去实现的。这时就会出现多个时间，比如create
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.jk-kj.com/tags/mysql/"/>
    
      <category term="统计" scheme="http://www.jk-kj.com/tags/%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门笔记</title>
    <link href="http://www.jk-kj.com/2018/03/19/Docker%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.jk-kj.com/2018/03/19/Docker入门笔记/</id>
    <published>2018-03-19T06:24:01.000Z</published>
    <updated>2018-03-19T06:24:01.518Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次php安装ImageMagick扩展</title>
    <link href="http://www.jk-kj.com/2018/03/19/%E8%AE%B0%E4%B8%80%E6%AC%A1php%E5%AE%89%E8%A3%85ImageMagick%E6%89%A9%E5%B1%95/"/>
    <id>http://www.jk-kj.com/2018/03/19/记一次php安装ImageMagick扩展/</id>
    <published>2018-03-19T06:01:27.000Z</published>
    <updated>2018-03-21T09:12:47.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>将pdf转png图片</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>在wamp server环境下安装php_imagick拓展<br><a href="http://www.smallerpig.com/673.html" target="_blank" rel="external">http://www.smallerpig.com/673.html</a><br>windows php安装ImageMagick扩展<br><a href="http://blog.csdn.net/livelinux/article/details/50319853" target="_blank" rel="external">http://blog.csdn.net/livelinux/article/details/50319853</a><br>Centos 安装ImageMagick 与 imagick for php步骤详解<br><a href="https://www.cnblogs.com/xingmeng/p/4268043.html#undefined" target="_blank" rel="external">https://www.cnblogs.com/xingmeng/p/4268043.html#undefined</a></p><h3 id="本机wamp下安装php-imagick拓展"><a href="#本机wamp下安装php-imagick拓展" class="headerlink" title="本机wamp下安装php_imagick拓展"></a>本机wamp下安装php_imagick拓展</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.在php安装目录的ext文件夹下新建imagick文件夹<br>2.将该文件夹的路径添加到系统路径(path值).<br>3.从网址<a href="http://windows.php.net/downloads/pecl/releases/imagick/下载对应php版本的imagick(phpinfo中看php" target="_blank" rel="external">http://windows.php.net/downloads/pecl/releases/imagick/下载对应php版本的imagick(phpinfo中看php</a> version,Compiler ，Architecture，这三个属性)<br>4.这里需要注意的是下载的文件区别,我们从文件名中来区分,例如php_imagick-3.2.0b2-5.5-nts-vc11-x86.zip</p><pre><code>其中5.5是对应的php版本.nts值代表该文件适用于IIS,ts代表该文件适用于Apache,VC11和VC9是编译器的版本.我们可以适用phpinfo()命令来查看我们机器上php适用的是哪个版本(如图1)x86代表适用32位系统,x64代表适用64位系统</code></pre><p>5.下载好对应的zip文件后,将所有文件解压到我们第一步新建的imagick文件夹!</p><p>6.添加php_imagick.dll的完整路径到php.ini文件中.例如:extension=C:\wamp\bin\php\php5.5.12\ext\ext\imagick\php_imagick.dll</p><p>7.重启wamp服务器</p><p>8.运行phpinfo看看是不是已经成功添加拓展了</p><p>9.查看phpinfo中，查看ImageMagick supported formats内的值</p><p>输入phpinfo()看到imagick，就算装成功了，但这个时候还不能用，你会看到ImageMagick number of supported formats 为0，ImageMagick supported formats no value，还要安装ImageMagick ，phpinfo里面会写出要安装那个版本的，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ImageMagick 6.9.3-7 Q16 x64 2016-03-27 http://www.imagemagick.org</div></pre></td></tr></table></figure></p><p>然后去下载这个ImageMagick 6.9.3-7 Q16 x64 版本的安装</p><p>记得版本要对得上号，要不然就会出现ImageMagick supported formats no value</p><p>安装完后重启，再输入phpinfo,就会看到ImageMagick supported formats不是空的了，这个时候就算安全成功</p><h3 id="Centos-安装ImageMagick"><a href="#Centos-安装ImageMagick" class="headerlink" title="Centos 安装ImageMagick"></a>Centos 安装ImageMagick</h3><h4 id="1-依次运行以下命令"><a href="#1-依次运行以下命令" class="headerlink" title="1. 依次运行以下命令"></a>1. 依次运行以下命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install ImageMagick</div><div class="line"></div><div class="line">yum install ImageMagick-devel</div><div class="line"></div><div class="line">yum install php-pear [for PECL]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install php-devel</div></pre></td></tr></table></figure><h4 id="2-安装C编译器"><a href="#2-安装C编译器" class="headerlink" title="2. 安装C编译器"></a>2. 安装C编译器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc</div></pre></td></tr></table></figure><p>如果装不了gcc就用这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++ autoconf automake</div></pre></td></tr></table></figure></p><h4 id="3-安装imagick"><a href="#3-安装imagick" class="headerlink" title="3. 安装imagick"></a>3. 安装imagick</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pecl install imagick</div></pre></td></tr></table></figure><h4 id="4-加载imagick到php"><a href="#4-加载imagick到php" class="headerlink" title="4. 加载imagick到php"></a>4. 加载imagick到php</h4><p>在/etc/php.ini 加上extension=imagick.so</p><h4 id="5-重启service-httpd-restart"><a href="#5-重启service-httpd-restart" class="headerlink" title="5. 重启service httpd restart"></a>5. 重启service httpd restart</h4><h4 id="6-使用-phpinfo-或运行-php-m-grep-imagick-来查看是否安装成功"><a href="#6-使用-phpinfo-或运行-php-m-grep-imagick-来查看是否安装成功" class="headerlink" title="6. 使用 phpinfo() 或运行 php -m | grep imagick 来查看是否安装成功"></a>6. 使用 phpinfo() 或运行 php -m | grep imagick 来查看是否安装成功</h4><h3 id="mac-上安装"><a href="#mac-上安装" class="headerlink" title="mac 上安装"></a>mac 上安装</h3><h4 id="安装php的imagick拓展"><a href="#安装php的imagick拓展" class="headerlink" title="安装php的imagick拓展"></a>安装php的imagick拓展</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall php56-imagick --build-from-source</div></pre></td></tr></table></figure><h4 id="安装ghostscript"><a href="#安装ghostscript" class="headerlink" title="安装ghostscript"></a>安装ghostscript</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ghostscript</div></pre></td></tr></table></figure><h3 id="linux上安装"><a href="#linux上安装" class="headerlink" title="linux上安装"></a>linux上安装</h3><p>这次被坑惨了，linux是最近新的服务器里面没有安装过GD库，这个导致我后面多个坑</p><p>第一次安装走的是<br><a href="https://www.cnblogs.com/xingmeng/p/4268043.html#undefined" target="_blank" rel="external">https://www.cnblogs.com/xingmeng/p/4268043.html#undefined</a><br>里面的方法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum install ImageMagick</div><div class="line">yum install ImageMagick-devel</div><div class="line">yum install php-pear</div><div class="line">yum -y install php-devel</div><div class="line">yum install gcc</div><div class="line">yum install gcc gcc-c++ autoconf automake</div><div class="line">pecl install imagick</div></pre></td></tr></table></figure></p><p>加载imagick到php<br>在/etc/php.ini 加上extension=imagick.so</p><p>重启service httpd restart</p><p>使用 phpinfo() 或运行 php -m | grep imagick 来查看是否安装成功</p><p>这次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Imagick, ImagickDraw, ImagickPixel, ImagickPixelIterator,(ImagickKernel  不知道为什么没有这个，本机和mac上都有)</div></pre></td></tr></table></figure></p><p>结果提示错误，具体忘记了，估计是因为GD库没有引起的<br>之后照着<br><a href="http://blog.csdn.net/snow_small/article/details/79173575" target="_blank" rel="external">http://blog.csdn.net/snow_small/article/details/79173575</a><br>进行了编译安装<br>1、安装ImageMagic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost download]# wget http://www.imagemagick.org/download/ImageMagick.tar.gz  </div><div class="line"></div><div class="line">[root@localhost download]# tar -xzvf ImageMagick  </div><div class="line">[root@localhost download]# cd ImageMagick-7.0.7-22/  </div><div class="line">[root@localhost ImageMagick-7.0.7-22]# ./configure --prefix=/usr/local/imagemagick  </div><div class="line">[root@localhost ImageMagick-7.0.7-22]# make  </div><div class="line">[root@localhost ImageMagick-7.0.7-22]# make install</div></pre></td></tr></table></figure></p><p>2、检查是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ImageMagick-7.0.7-22]# /usr/local/imagemagick/bin/convert -version  </div><div class="line">Version: ImageMagick 7.0.7-22 Q16 x86_64 2018-01-26 http://www.imagemagick.org  </div><div class="line">Copyright: © 1999-2018 ImageMagick Studio LLC  </div><div class="line">License: http://www.imagemagick.org/script/license.php  </div><div class="line">Features: Cipher DPC HDRI OpenMP   </div><div class="line">Delegates (built-in): fontconfig freetype jng jpeg png x xml zlib</div></pre></td></tr></table></figure><h3 id="我的坑"><a href="#我的坑" class="headerlink" title="我的坑"></a>我的坑</h3><p>但是报下面这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Postscript delegate failed</div></pre></td></tr></table></figure></p><p>是<code>ghostscript</code>没安装，可实际是安装的在<code>/usr/bin/gs</code>中，但apache死活说找不到（是权限问题），网上有个解决方案是把’/usr/local/bin/gs’做软连接到<code>/usr/bin/gs</code>,可是我这边的情况刚好是倒过来的。</p><p>一狠心把<code>ghostscript</code>给卸载了，重新编译安装了gs，这次真出现在了<code>/usr/local/bin/gs</code>,建立了个软连接，真把这个问题解决了。</p><p>这次因为没有安装GD库，用的png版本太老，<code>Delegates (built-in): fontconfig freetype jng jpeg (png 没显示) x xml zlib</code></p><p>一直提示<br><code>no decode delegate for this image format PNG</code><br>因为没有安装GD库，我在编译<code>ImageMagick-7.0.7-22</code>时没有将<code>png</code>编译进行</p><p>直到手动添加了png库，才最终发现没有安装GD库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;将pdf转png图片&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;
      
    
    </summary>
    
    
      <category term="imagick" scheme="http://www.jk-kj.com/tags/imagick/"/>
    
      <category term="ImageMagick" scheme="http://www.jk-kj.com/tags/ImageMagick/"/>
    
      <category term="php" scheme="http://www.jk-kj.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>爷爷走好</title>
    <link href="http://www.jk-kj.com/2018/02/06/%E7%88%B7%E7%88%B7%E8%B5%B0%E5%A5%BD/"/>
    <id>http://www.jk-kj.com/2018/02/06/爷爷走好/</id>
    <published>2018-02-06T00:43:13.000Z</published>
    <updated>2018-02-06T00:43:13.541Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>brew安装mongodb及php mongodb扩展</title>
    <link href="http://www.jk-kj.com/2018/01/25/brew%E5%AE%89%E8%A3%85mongodb%E5%8F%8Aphp-mongodb%E6%89%A9%E5%B1%95/"/>
    <id>http://www.jk-kj.com/2018/01/25/brew安装mongodb及php-mongodb扩展/</id>
    <published>2018-01-25T04:59:34.000Z</published>
    <updated>2018-01-25T06:41:16.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>安装某laravel项目</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://old.ruesin.com/system/mac/mac-mongodb-345.html" target="_blank" rel="external">http://old.ruesin.com/system/mac/mac-mongodb-345.html</a></p><h3 id="安装mongodb服务"><a href="#安装mongodb服务" class="headerlink" title="安装mongodb服务"></a>安装mongodb服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mongodb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">==&gt; Installing mongodb</div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/mongodb-3.4.10.high_sierra.</div><div class="line">######################################################################## 100.0%</div><div class="line">==&gt; Pouring mongodb-3.4.10.high_sierra.bottle.tar.gz</div><div class="line">==&gt; Caveats</div><div class="line">To have launchd start mongodb now and restart at login:</div><div class="line">  brew services start mongodb</div><div class="line">Or, if you don&apos;t want/need a background service you can just run:</div><div class="line">  mongod --config /usr/local/etc/mongod.conf</div><div class="line">==&gt; Summary</div></pre></td></tr></table></figure><h3 id="php-的-mongodb-扩展"><a href="#php-的-mongodb-扩展" class="headerlink" title="php 的 mongodb 扩展"></a>php 的 mongodb 扩展</h3><p>search一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew search mongo</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install php71-mongo</div></pre></td></tr></table></figure><h4 id="安装出错"><a href="#安装出错" class="headerlink" title="安装出错"></a>安装出错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NOTICE: PHP message: PHP Warning:  PHP Startup: mongodb: Unable to initialize module</div><div class="line">Module compiled with build ID=API20160303,NTS</div><div class="line">PHP    compiled with build ID=API20160303,NTS,debug</div><div class="line">These options need to match</div><div class="line"> in Unknown on line 0</div><div class="line">&lt;br /&gt;</div><div class="line">&lt;b&gt;Warning&lt;/b&gt;:  PHP Startup: mongodb: Unable to initialize module</div><div class="line">Module compiled with build ID=API20160303,NTS</div><div class="line">PHP    compiled with build ID=API20160303,NTS,debug</div><div class="line">These options need to match</div><div class="line"> in &lt;b&gt;Unknown&lt;/b&gt; on line &lt;b&gt;0&lt;/b&gt;&lt;br /&gt;</div><div class="line">Unknown(0) : Warning - PHP Startup: mongodb: Unable to initialize module</div><div class="line">Module compiled with build ID=API20160303,NTS</div><div class="line">PHP    compiled with build ID=API20160303,NTS,debug</div><div class="line">These options need to match</div></pre></td></tr></table></figure><p>网上搜是需要重新安装编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall &lt;formulaname&gt; --build-from-source</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;安装某laravel项目&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参
      
    
    </summary>
    
    
      <category term="brew" scheme="http://www.jk-kj.com/tags/brew/"/>
    
      <category term="mongodb" scheme="http://www.jk-kj.com/tags/mongodb/"/>
    
      <category term="php拓展" scheme="http://www.jk-kj.com/tags/php%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>解决使用JWT时报Cannot handle token prior to的问题</title>
    <link href="http://www.jk-kj.com/2018/01/12/%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8JWT%E6%97%B6%E6%8A%A5Cannot-handle-token-prior-to%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.jk-kj.com/2018/01/12/解决使用JWT时报Cannot-handle-token-prior-to的问题/</id>
    <published>2018-01-12T05:28:56.000Z</published>
    <updated>2018-03-19T06:22:14.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用JWT时，因为本地时间和服务器上的时间不一致，导致的请求发送失败</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在<code>vendor\firebase\php-jwt\src\JWT.php</code>中的第113行左右添加如下的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;&lt;br /&gt; payload-&gt;iat = &apos;. $payload-&gt;iat . &apos;&lt;br /&gt;and time() = &apos;.time() . &quot;&lt;br /&gt;leeway= &quot;. self::$leeway;</div></pre></td></tr></table></figure></p><p>会打印出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">payload-&gt;iat = 1447702275  </div><div class="line">and time() = 1447702211  </div><div class="line">leeway= 0</div></pre></td></tr></table></figure></p><p>通过时间差计算出和服务器的差值，并调整本地的时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;使用JWT时，因为本地时间和服务器上的时间不一致，导致的请求发送失败&lt;/p&gt;
&lt;h4 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; c
      
    
    </summary>
    
    
      <category term="JWT时间问题" scheme="http://www.jk-kj.com/tags/JWT%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>如何提取谷歌chrome浏览器的crx插件</title>
    <link href="http://www.jk-kj.com/2018/01/12/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96%E8%B0%B7%E6%AD%8Cchrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84crx%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.jk-kj.com/2018/01/12/如何提取谷歌chrome浏览器的crx插件/</id>
    <published>2018-01-12T01:29:21.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>自己有翻墙工具，而其他人没有，无法获取到插件</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><pre><code>访问Chrome扩展商店搜索需要提取的扩展点击进入扩展详情复制地址栏连接打开chrome-extension-downloader.com粘贴地址点击下载即可</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;自己有翻墙工具，而其他人没有，无法获取到插件&lt;/p&gt;
&lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="chrome插件" scheme="http://www.jk-kj.com/tags/chrome%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>zimg图片服务器</title>
    <link href="http://www.jk-kj.com/2017/12/26/zimg%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.jk-kj.com/2017/12/26/zimg图片服务器/</id>
    <published>2017-12-26T03:06:18.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>公司转移图片服务器，让我负责<br>一直没去弄明白图片服务器的问题，有幸运</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;公司转移图片服务器，让我负责&lt;br&gt;一直没去弄明白图片服务器的问题，有幸运&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="zimg" scheme="http://www.jk-kj.com/tags/zimg/"/>
    
      <category term="图片裁剪" scheme="http://www.jk-kj.com/tags/%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA/"/>
    
      <category term="图片服务器" scheme="http://www.jk-kj.com/tags/%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>记一次linux上大文件的转移</title>
    <link href="http://www.jk-kj.com/2017/12/13/%E8%AE%B0%E4%B8%80%E6%AC%A1linux%E4%B8%8A%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E7%A7%BB/"/>
    <id>http://www.jk-kj.com/2017/12/13/记一次linux上大文件的转移/</id>
    <published>2017-12-13T04:43:08.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>服务器的内容转到另一台服务器</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="首先进行了打包"><a href="#首先进行了打包" class="headerlink" title="首先进行了打包"></a>首先进行了打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -cvf ./kod.tar ./kod3.1</div></pre></td></tr></table></figure><p>打完包，发现有3个多G<br>就尝试打包压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zcvf ./kod2.tar.gz ./kod3.1</div></pre></td></tr></table></figure></p><p>结果还是3G多，只压缩了200M</p><h4 id="进行传输"><a href="#进行传输" class="headerlink" title="进行传输"></a>进行传输</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ./kod.tar root@192.168.60.168:/tmp</div></pre></td></tr></table></figure><p>开始有5M/s的速度，可慢慢地变得只有800K/s<br>最气人的是在60%时的时候居然出现了<code>stalled</code></p><h4 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">When transferring large files(for example mksysb images) using scp through a firewall, the scp connection stalls.</div><div class="line">Cause:</div><div class="line"></div><div class="line">The reason for scp to stall, is because scp greedily grabs as much bandwith of the network as possible when it transfers files, any delay caused by the network switch of the firewall can easily make the TCP connection stalled.</div><div class="line">Solution:</div><div class="line"></div><div class="line">There’s a solution to this problem: Add “-l 8192″ to the scp command.</div><div class="line"></div><div class="line">Adding the option “-l 8192″ limits the scp session bandwith up to 8192 Kbit/second, which seems to work safe and fast enough (up to 1 MB/second):</div></pre></td></tr></table></figure><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>在原有的命令行上加上了<code>-l 8192</code>可以维持在1M/s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -l 8192 ./kod.tar root@192.168.60.168:/tmp</div></pre></td></tr></table></figure></p><p>开始速度也有6M/s，后面速度一直维持在1M/s，中间无<code>stalled</code></p><p>如果是<code>-l 16000</code>则维持在2M/s，以此类推</p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xvf kod.tar</div></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf kod.tar.gz</div></pre></td></tr></table></figure></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>因为转移的文件有很多，而且都很大，我们不可能一直开者等待它传完，这就需要后台运行</p><p>先输入密码进行传输<br>然后用<code>ctrl+z</code>,将当前进程挂起到后台暂停运行，执行一些别的操作<br>然后用 <code>bg</code> 来将挂起的进程放在后台(也可以用 <code>fg</code> 来将挂起的进程重新放回前台)继续运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@pvcent107 build]# scp -l 8192 ./kod.tar root@192.168.60.168:/tmp</div><div class="line">---------ctrl+zx</div><div class="line">[1]+  Stopped                 scp -l 8192 ./kod.tar root@192.168.60.168:/tmp</div><div class="line">[root@pvcent107 build]# bg %1</div><div class="line">[1]+ scp -l 8192 ./kod.tar root@192.168.60.168:/tmp &amp;</div><div class="line">[root@pvcent107 build]# jobs</div><div class="line">[1]+  Running                 scp -l 8192 ./kod.tar root@192.168.60.168:/tmp &amp;</div><div class="line">[root@pvcent107 build]# disown -h %1</div><div class="line">[root@pvcent107 build]# ps -ef |grep kod</div><div class="line">root      5790  5577  1 10:04 pts/3    00:00:00 scp -l 8192 ./kod.tar root@192.168.60.168:/tmp</div><div class="line">root      5824  5577  0 10:05 pts/3    00:00:00 grep kod</div></pre></td></tr></table></figure></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>有时jobs会有多个，注意自己的文件大小是否正常，我就别坑了1次，没传输完成（完成了一个jobs），以为完成了就进行解压缩了。</p><h4 id="400G个文件打包"><a href="#400G个文件打包" class="headerlink" title="400G个文件打包"></a>400G个文件打包</h4><p>之前想着。。。400G的文件需要切分-，-！可是用了切分时，却始终没有获取完整的包，好几次我都相信我的总包才80G</p><p>最后用了整包打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup tar -cjf kod.tar.bz2 ./kod &gt;/dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p><p>打完包发现才有400G+…….我的天，整整打包了一天一夜</p><h4 id="400G的传输"><a href="#400G的传输" class="headerlink" title="400G的传输"></a>400G的传输</h4><p>scp 已经无法满足，因为万一中间来个服务器重启，或者其他因素那over了，那流量可就白白流失了<br>最后采用了<code>rsync</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -P --rsh=ssh ./kod_all.tar.bz2 112.13.14.156:/data/</div></pre></td></tr></table></figure></p><p>然后输入密码<br>再ctrl+z 暂停<br>再bg %1  放入后台（假设当前后台允许索引为1）<br>然后用jobs查看<br>如果你当前退出过当前终端，jobs已经无法查看到后台运行的进程，只能用ps<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef |grep kod</div></pre></td></tr></table></figure></p><p>会有如下的显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root     175100 174758 47 08:10 pts/2    00:15:13 rsync -P --rsh=ssh ./kod_all.tar.bz2 112.13.91.176:/data/</div><div class="line">root     183245 174758  0 08:42 pts/2    00:00:00 grep --color=auto kod</div></pre></td></tr></table></figure></p><p>其中<code>00:15:13</code>指本次断点续传进行的时间。<br>当传输了200G以后，继续进行断点续传，这个时间会有好长一段时间是不更新的（作者认为它在寻找上一次的断点，因为文件大了寻找的时间会久一点），如果你这个时候马上关闭总端，很有可能本次传输就没执行，我就被坑了一次，一觉醒来一点就没传。。。</p><h4 id="rsync与scp的差异"><a href="#rsync与scp的差异" class="headerlink" title="rsync与scp的差异"></a>rsync与scp的差异</h4><p>用scp时，这边传多少，另一个服务器就显示文件实时大小<br>而用rsync时，另一个服务器不实时显示文件大小，只有将这边的进程暂时kill掉，才能知道到底传了多少（可能我这个办法比较粗暴）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -9 175100</div></pre></td></tr></table></figure></p><h4 id="400G的解压"><a href="#400G的解压" class="headerlink" title="400G的解压"></a>400G的解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup tar -xjf ./kod_all.tar.bz2 &gt; /dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure><p>其他查看操作同上面</p><h3 id="其他，拆分打包（失败了）"><a href="#其他，拆分打包（失败了）" class="headerlink" title="其他，拆分打包（失败了）"></a>其他，拆分打包（失败了）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup tar -cjf - kod/ |split -b 10000m - kod.tar.bz2. &gt;/dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure><p>它会生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.aa</div><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.ab</div><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.ac</div><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.ad</div><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.ae</div><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.af</div><div class="line">-rw-r--r-- 1 Administrator 197121   5242880 十二 27 08:39 kod.tar.bz2.ag</div></pre></td></tr></table></figure></p><p>后面默认2位，字符逐渐增加<br>它的解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup cat pinkephp.tar.bz2.* | tar -xj &amp;</div></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://linux.cn/article-7170-1.html" target="_blank" rel="external">https://linux.cn/article-7170-1.html</a></p><p><a href="http://blog.csdn.net/tdstds/article/details/24870535" target="_blank" rel="external">http://blog.csdn.net/tdstds/article/details/24870535</a></p><p><a href="http://blog.csdn.net/eroswang/article/details/5555415/" target="_blank" rel="external">http://blog.csdn.net/eroswang/article/details/5555415/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;服务器的内容转到另一台服务器&lt;/p&gt;
&lt;h3 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.jk-kj.com/tags/linux/"/>
    
      <category term="scp" scheme="http://www.jk-kj.com/tags/scp/"/>
    
      <category term="rsync" scheme="http://www.jk-kj.com/tags/rsync/"/>
    
      <category term="打包" scheme="http://www.jk-kj.com/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="断点续传" scheme="http://www.jk-kj.com/tags/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>记一次网站字体采用思源字体</title>
    <link href="http://www.jk-kj.com/2017/12/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E7%AB%99%E5%AD%97%E4%BD%93%E9%87%87%E7%94%A8%E6%80%9D%E6%BA%90%E5%AD%97%E4%BD%93/"/>
    <id>http://www.jk-kj.com/2017/12/07/记一次网站字体采用思源字体/</id>
    <published>2017-12-07T04:46:14.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>客户想让他的网站都显示思源字体</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>fontsquirrel<br><a href="https://www.fontsquirrel.com" target="_blank" rel="external">https://www.fontsquirrel.com</a><br>CSS @font-face属性实现在网页中嵌入任意字体<br><a href="http://www.jb51.net/css/23073.html" target="_blank" rel="external">http://www.jb51.net/css/23073.html</a></p><p>如何在网页中嵌入自己想要的字体(实例下载)<br><a href="http://blog.csdn.net/sinolzeng/article/details/41802951" target="_blank" rel="external">http://blog.csdn.net/sinolzeng/article/details/41802951</a></p><h3 id="linux安装字体（错误的方法）"><a href="#linux安装字体（错误的方法）" class="headerlink" title="linux安装字体（错误的方法）"></a>linux安装字体（错误的方法）</h3><h4 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h4><p>下载思源全套字体（字体文件名称：NotoSansHans）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://pan.baidu.com/s/1uJBBK</div></pre></td></tr></table></figure></p><p>windows的字体比较多，其字体文件位于 C:\WINDOWS\Fonts,如果想额外安装也可以到这里找找</p><p>字体格式有ttf和otf等多重后缀，linux上ttf和oft都可以</p><h4 id="移动文件到服务器指定位置"><a href="#移动文件到服务器指定位置" class="headerlink" title="移动文件到服务器指定位置"></a>移动文件到服务器指定位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/share/fonts/NotoSansHans</div><div class="line"># cp arial*.otf /usr/share/fonts/NotoSansHans/</div><div class="line">或</div><div class="line"># cp arial*.ttf /usr/share/fonts/NotoSansHans/</div></pre></td></tr></table></figure><h4 id="为刚加入的字体设置缓存使之有效"><a href="#为刚加入的字体设置缓存使之有效" class="headerlink" title="为刚加入的字体设置缓存使之有效"></a>为刚加入的字体设置缓存使之有效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/share/font/NotoSansHans</div><div class="line"># fc-cache -fv</div></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>因为我在windows里先安装了思源字体，并在<code>Noto Sans S Chinese</code>中找到了思源字体，所以font-family中我用<code>Noto Sans S Chinese</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">    font-family: &quot;Noto Sans S Chinese&quot;, Helvetica, Arial, sans-serif;</div><div class="line">    -webkit-font-smoothing: antialiased;</div><div class="line">    color: #777777;</div><div class="line">    font-size: 14px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>为什么文件名是<code>NotoSansHans</code>，安装后需要<code>Noto Sans S Chinese</code><br>这里有个疑惑</p><h4 id="疑惑解决（2017-12-8）"><a href="#疑惑解决（2017-12-8）" class="headerlink" title="疑惑解决（2017.12.8）"></a>疑惑解决（2017.12.8）</h4><p>自己本地安装了ttf包后，生成了Noto Sans S Chinese字体，可是这个字体不是服务器里的</p><p>也就是说，我在linux上安装的字体只能在linux上使用,浏览器里使用一个是看客户端有没有这个字体，另一个是你的css中引入如ttf之类的字体资源，但是对于中文来说，要把整个字体都方法css上，大概要10M以上（这个肯定不是个办法）</p><h3 id="css-font-face引入-只能引入英文字体"><a href="#css-font-face引入-只能引入英文字体" class="headerlink" title="css font-face引入(只能引入英文字体)"></a>css font-face引入(只能引入英文字体)</h3><p>在<br><a href="https://www.fontsquirrel.com" target="_blank" rel="external">https://www.fontsquirrel.com</a><br>中找到自己需要的字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">font-family: &apos;fontNameRegular&apos;;</div><div class="line">src: url(&apos;fontName.eot&apos;);</div><div class="line">src: local(&apos;fontName Regular&apos;),</div><div class="line">local(&apos;fontName&apos;),</div><div class="line">url(&apos;fontName.woff&apos;) format(&apos;woff&apos;),</div><div class="line">url(&apos;fontName.ttf&apos;) format(&apos;truetype&apos;),</div><div class="line">url(&apos;fontName.svg#fontName&apos;) format(&apos;svg&apos;);</div><div class="line">&#125;</div><div class="line">/*其中fontName替换为你的字体名称*/</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>想在网页中全部使用某不常用的字体，几乎是不可取的方法，除非客户端里大家都安装了该字体</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;客户想让他的网站都显示思源字体&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="css字体" scheme="http://www.jk-kj.com/tags/css%E5%AD%97%E4%BD%93/"/>
    
      <category term="字体" scheme="http://www.jk-kj.com/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>elementui引入iconfont</title>
    <link href="http://www.jk-kj.com/2017/11/10/elementui%E5%BC%95%E5%85%A5iconfont/"/>
    <id>http://www.jk-kj.com/2017/11/10/elementui引入iconfont/</id>
    <published>2017-11-10T07:58:02.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>element官方的icon太少</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/b376924098/article/details/78286880#reply" target="_blank" rel="external">http://blog.csdn.net/b376924098/article/details/78286880#reply</a></p><p>CSS3 @font-face [<a href="http://www.w3cplus.com/content/css3-font-face" target="_blank" rel="external">http://www.w3cplus.com/content/css3-font-face</a>]</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul><li>去阿里巴巴矢量图，地址;<a href="http://www.iconfont.cn/" target="_blank" rel="external">http://www.iconfont.cn/</a></li><li>进入网站登录账户后，新建一个项目</li><li>选择一些自己要用到的图标如上图点击购物车按钮添加到购物车。</li></ul><p> <img src="http://img.blog.csdn.net/20171019170321456?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYjM3NjkyNDA5OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><ul><li>保存时，以yourprogect-icon命名</li><li>并命名一个自己的字体名称，jkkjFontFamily</li><li>在iconfont.css添加以下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[class^=&quot;jkkj-icon&quot;], [class*=&quot; jkkj-icon&quot;] &#123;</div><div class="line">  font-family:&quot;jkkjFontFamily&quot; !important;</div><div class="line">  /* 以下内容参照第三方图标库本身的规则 */</div><div class="line">  font-size: 18px;</div><div class="line">  font-style:normal;</div><div class="line">  -webkit-font-smoothing: antialiased;</div><div class="line">  -moz-osx-font-smoothing: grayscale;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>效果类似于下图<br><img src="http://img.blog.csdn.net/20171019171813100?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYjM3NjkyNDA5OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;element官方的icon太少&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="elementui" scheme="http://www.jk-kj.com/tags/elementui/"/>
    
      <category term="iconfont" scheme="http://www.jk-kj.com/tags/iconfont/"/>
    
  </entry>
  
  <entry>
    <title>node-sass安装不成功的解决方法</title>
    <link href="http://www.jk-kj.com/2017/11/09/node-sass%E5%AE%89%E8%A3%85%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://www.jk-kj.com/2017/11/09/node-sass安装不成功的解决方法/</id>
    <published>2017-11-09T07:55:24.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>每次安装node-sass都被墙导致安装不成功</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.csdn.net/qq_35440678/article/details/51909327" target="_blank" rel="external">http://blog.csdn.net/qq_35440678/article/details/51909327</a></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>直接用淘宝的镜像安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">cnpm install node-sass</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;每次安装node-sass都被墙导致安装不成功&lt;/p&gt;
&lt;h4 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="nodejs" scheme="http://www.jk-kj.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置eslint</title>
    <link href="http://www.jk-kj.com/2017/11/03/vscode%E9%85%8D%E7%BD%AEeslint/"/>
    <id>http://www.jk-kj.com/2017/11/03/vscode配置eslint/</id>
    <published>2017-11-03T01:08:31.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>公司开始了新项目用了vue，因为用了某人开源的基础架构，所以被动的被用上了eslint，刚开始用sublime写vue，结果各种规法错误，很是恼火。最后按网上教程用了vscode+eslint插件，一键格式化错误，牛X死了</p><h4 id="安装eslint插件"><a href="#安装eslint插件" class="headerlink" title="安装eslint插件"></a>安装eslint插件</h4><p>安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，依次点击 文件 &gt; 首选项 &gt; 设置 打开 VSCode 配置文件,添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&quot;eslint.autoFixOnSave&quot;: true,</div><div class="line">&quot;files.autoSave&quot;:&quot;off&quot;,</div><div class="line">&quot;eslint.validate&quot;: [</div><div class="line">   &quot;javascript&quot;,</div><div class="line">   &quot;javascriptreact&quot;,</div><div class="line">   &quot;html&quot;,</div><div class="line">   &#123; &quot;language&quot;: &quot;vue&quot;, &quot;autoFix&quot;: true &#125;</div><div class="line"> ],</div><div class="line"> &quot;eslint.options&quot;: &#123;</div><div class="line">    &quot;plugins&quot;: [&quot;html&quot;]</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>这样每次保存的时候就可以根据根目录下.eslintrc.js你配置的eslint规则来检查和做一些简单的fix。</p><p>当前eslint规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    root: true,</div><div class="line">    parser: &apos;babel-eslint&apos;,</div><div class="line">    parserOptions: &#123;</div><div class="line">        sourceType: &apos;module&apos;</div><div class="line">    &#125;,</div><div class="line">    env: &#123;</div><div class="line">        browser: true,</div><div class="line">        node: true,</div><div class="line">        es6: true,</div><div class="line">    &#125;,</div><div class="line">    extends: &apos;eslint:recommended&apos;,</div><div class="line">    // required to lint *.vue files</div><div class="line">    plugins: [</div><div class="line">        &apos;html&apos;</div><div class="line">    ],</div><div class="line">    // check if imports actually resolve</div><div class="line">    &apos;settings&apos;: &#123;</div><div class="line">        &apos;import/resolver&apos;: &#123;</div><div class="line">            &apos;webpack&apos;: &#123;</div><div class="line">                &apos;config&apos;: &apos;build/webpack.base.conf.js&apos;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    // add your custom rules here</div><div class="line">    //it is base on https://github.com/vuejs/eslint-config-vue</div><div class="line">    &apos;rules&apos;: &#123;</div><div class="line">        &apos;accessor-pairs&apos;: 2,</div><div class="line">        &apos;arrow-spacing&apos;: [2, &#123; &apos;before&apos;: true, &apos;after&apos;: true &#125;],</div><div class="line">        &apos;block-spacing&apos;: [2, &apos;always&apos;],</div><div class="line">        &apos;brace-style&apos;: [2, &apos;1tbs&apos;, &#123; &apos;allowSingleLine&apos;: true &#125;],</div><div class="line">        &apos;camelcase&apos;: [0, &#123; &apos;properties&apos;: &apos;always&apos; &#125;],</div><div class="line">        &apos;comma-dangle&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;comma-spacing&apos;: [2, &#123; &apos;before&apos;: false, &apos;after&apos;: true &#125;],</div><div class="line">        &apos;comma-style&apos;: [2, &apos;last&apos;],</div><div class="line">        &apos;constructor-super&apos;: 2,</div><div class="line">        &apos;curly&apos;: [2, &apos;multi-line&apos;],</div><div class="line">        &apos;dot-location&apos;: [2, &apos;property&apos;],</div><div class="line">        &apos;eol-last&apos;: 2,</div><div class="line">        &apos;eqeqeq&apos;: [2, &apos;allow-null&apos;],</div><div class="line">        &apos;generator-star-spacing&apos;: [2, &#123; &apos;before&apos;: true, &apos;after&apos;: true &#125;],</div><div class="line">        &apos;handle-callback-err&apos;: [2, &apos;^(err|error)$&apos; ],</div><div class="line">        &apos;indent&apos;: [2, 2, &#123; &apos;SwitchCase&apos;: 1 &#125;],</div><div class="line">        &apos;jsx-quotes&apos;: [2, &apos;prefer-single&apos;],</div><div class="line">        &apos;key-spacing&apos;: [2, &#123; &apos;beforeColon&apos;: false, &apos;afterColon&apos;: true &#125;],</div><div class="line">        &apos;keyword-spacing&apos;: [2, &#123; &apos;before&apos;: true, &apos;after&apos;: true &#125;],</div><div class="line">        &apos;new-cap&apos;: [2, &#123; &apos;newIsCap&apos;: true, &apos;capIsNew&apos;: false &#125;],</div><div class="line">        &apos;new-parens&apos;: 2,</div><div class="line">        &apos;no-array-constructor&apos;: 2,</div><div class="line">        &apos;no-caller&apos;: 2,</div><div class="line">        &apos;no-console&apos;: &apos;off&apos;,</div><div class="line">        &apos;no-class-assign&apos;: 2,</div><div class="line">        &apos;no-cond-assign&apos;: 2,</div><div class="line">        &apos;no-const-assign&apos;: 2,</div><div class="line">        &apos;no-control-regex&apos;: 2,</div><div class="line">        &apos;no-delete-var&apos;: 2,</div><div class="line">        &apos;no-dupe-args&apos;: 2,</div><div class="line">        &apos;no-dupe-class-members&apos;: 2,</div><div class="line">        &apos;no-dupe-keys&apos;: 2,</div><div class="line">        &apos;no-duplicate-case&apos;: 2,</div><div class="line">        &apos;no-empty-character-class&apos;: 2,</div><div class="line">        &apos;no-empty-pattern&apos;: 2,</div><div class="line">        &apos;no-eval&apos;: 2,</div><div class="line">        &apos;no-ex-assign&apos;: 2,</div><div class="line">        &apos;no-extend-native&apos;: 2,</div><div class="line">        &apos;no-extra-bind&apos;: 2,</div><div class="line">        &apos;no-extra-boolean-cast&apos;: 2,</div><div class="line">        &apos;no-extra-parens&apos;: [2, &apos;functions&apos;],</div><div class="line">        &apos;no-fallthrough&apos;: 2,</div><div class="line">        &apos;no-floating-decimal&apos;: 2,</div><div class="line">        &apos;no-func-assign&apos;: 2,</div><div class="line">        &apos;no-implied-eval&apos;: 2,</div><div class="line">        &apos;no-inner-declarations&apos;: [2, &apos;functions&apos;],</div><div class="line">        &apos;no-invalid-regexp&apos;: 2,</div><div class="line">        &apos;no-irregular-whitespace&apos;: 2,</div><div class="line">        &apos;no-iterator&apos;: 2,</div><div class="line">        &apos;no-label-var&apos;: 2,</div><div class="line">        &apos;no-labels&apos;: [2, &#123; &apos;allowLoop&apos;: false, &apos;allowSwitch&apos;: false &#125;],</div><div class="line">        &apos;no-lone-blocks&apos;: 2,</div><div class="line">        &apos;no-mixed-spaces-and-tabs&apos;: 2,</div><div class="line">        &apos;no-multi-spaces&apos;: 2,</div><div class="line">        &apos;no-multi-str&apos;: 2,</div><div class="line">        &apos;no-multiple-empty-lines&apos;: [2, &#123; &apos;max&apos;: 1 &#125;],</div><div class="line">        &apos;no-native-reassign&apos;: 2,</div><div class="line">        &apos;no-negated-in-lhs&apos;: 2,</div><div class="line">        &apos;no-new-object&apos;: 2,</div><div class="line">        &apos;no-new-require&apos;: 2,</div><div class="line">        &apos;no-new-symbol&apos;: 2,</div><div class="line">        &apos;no-new-wrappers&apos;: 2,</div><div class="line">        &apos;no-obj-calls&apos;: 2,</div><div class="line">        &apos;no-octal&apos;: 2,</div><div class="line">        &apos;no-octal-escape&apos;: 2,</div><div class="line">        &apos;no-path-concat&apos;: 2,</div><div class="line">        &apos;no-proto&apos;: 2,</div><div class="line">        &apos;no-redeclare&apos;: 2,</div><div class="line">        &apos;no-regex-spaces&apos;: 2,</div><div class="line">        &apos;no-return-assign&apos;: [2, &apos;except-parens&apos;],</div><div class="line">        &apos;no-self-assign&apos;: 2,</div><div class="line">        &apos;no-self-compare&apos;: 2,</div><div class="line">        &apos;no-sequences&apos;: 2,</div><div class="line">        &apos;no-shadow-restricted-names&apos;: 2,</div><div class="line">        &apos;no-spaced-func&apos;: 2,</div><div class="line">        &apos;no-sparse-arrays&apos;: 2,</div><div class="line">        &apos;no-this-before-super&apos;: 2,</div><div class="line">        &apos;no-throw-literal&apos;: 2,</div><div class="line">        &apos;no-trailing-spaces&apos;: 2,</div><div class="line">        &apos;no-undef&apos;: 2,</div><div class="line">        &apos;no-undef-init&apos;: 2,</div><div class="line">        &apos;no-unexpected-multiline&apos;: 2,</div><div class="line">        &apos;no-unmodified-loop-condition&apos;: 2,</div><div class="line">        &apos;no-unneeded-ternary&apos;: [2, &#123; &apos;defaultAssignment&apos;: false &#125;],</div><div class="line">        &apos;no-unreachable&apos;: 2,</div><div class="line">        &apos;no-unsafe-finally&apos;: 2,</div><div class="line">        &apos;no-unused-vars&apos;: [2, &#123; &apos;vars&apos;: &apos;all&apos;, &apos;args&apos;: &apos;none&apos; &#125;],</div><div class="line">        &apos;no-useless-call&apos;: 2,</div><div class="line">        &apos;no-useless-computed-key&apos;: 2,</div><div class="line">        &apos;no-useless-constructor&apos;: 2,</div><div class="line">        &apos;no-useless-escape&apos;: 0,</div><div class="line">        &apos;no-whitespace-before-property&apos;: 2,</div><div class="line">        &apos;no-with&apos;: 2,</div><div class="line">        &apos;one-var&apos;: [2, &#123; &apos;initialized&apos;: &apos;never&apos; &#125;],</div><div class="line">        &apos;operator-linebreak&apos;: [2, &apos;after&apos;, &#123; &apos;overrides&apos;: &#123; &apos;?&apos;: &apos;before&apos;, &apos;:&apos;: &apos;before&apos; &#125; &#125;],</div><div class="line">        &apos;padded-blocks&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;quotes&apos;: [2, &apos;single&apos;, &#123; &apos;avoidEscape&apos;: true, &apos;allowTemplateLiterals&apos;: true &#125;],</div><div class="line">        &apos;semi&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;semi-spacing&apos;: [2, &#123; &apos;before&apos;: false, &apos;after&apos;: true &#125;],</div><div class="line">        &apos;space-before-blocks&apos;: [2, &apos;always&apos;],</div><div class="line">        &apos;space-before-function-paren&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;space-in-parens&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;space-infix-ops&apos;: 2,</div><div class="line">        &apos;space-unary-ops&apos;: [2, &#123; &apos;words&apos;: true, &apos;nonwords&apos;: false &#125;],</div><div class="line">        &apos;spaced-comment&apos;: [2, &apos;always&apos;, &#123; &apos;markers&apos;: [&apos;global&apos;, &apos;globals&apos;, &apos;eslint&apos;, &apos;eslint-disable&apos;, &apos;*package&apos;, &apos;!&apos;, &apos;,&apos;] &#125;],</div><div class="line">        &apos;template-curly-spacing&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;use-isnan&apos;: 2,</div><div class="line">        &apos;valid-typeof&apos;: 2,</div><div class="line">        &apos;wrap-iife&apos;: [2, &apos;any&apos;],</div><div class="line">        &apos;yield-star-spacing&apos;: [2, &apos;both&apos;],</div><div class="line">        &apos;yoda&apos;: [2, &apos;never&apos;],</div><div class="line">        &apos;prefer-const&apos;: 2,</div><div class="line">        &apos;no-debugger&apos;: process.env.NODE_ENV === &apos;production&apos; ? 2 : 0,</div><div class="line">        &apos;object-curly-spacing&apos;: [2, &apos;always&apos;, &#123; objectsInObjects: false &#125;],</div><div class="line">        &apos;array-bracket-spacing&apos;: [2, &apos;never&apos;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>shift+ctrl+p</code>    =&gt; 选择 <code>eslint fix all auto-fixable problems</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;公司开始了新项目用了vue，因为用了某人开源的基础架构，所以被动的被用上了eslint，刚开始用sublime写vue，结果各种规法错误，很
      
    
    </summary>
    
    
      <category term="vscode" scheme="http://www.jk-kj.com/tags/vscode/"/>
    
      <category term="eslint" scheme="http://www.jk-kj.com/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>GitBash修改默认打开之后的路径</title>
    <link href="http://www.jk-kj.com/2017/11/03/GitBash%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B9%8B%E5%90%8E%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>http://www.jk-kj.com/2017/11/03/GitBash修改默认打开之后的路径/</id>
    <published>2017-11-03T00:58:26.000Z</published>
    <updated>2017-11-05T09:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在公司windows下用gitbash，每次打开都要切换到D盘指定目录，非常费时，网上搜了一下果真有对应方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.csdn.net/zzfenglin/article/details/54646541" target="_blank" rel="external">http://blog.csdn.net/zzfenglin/article/details/54646541</a></p><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><p>在“Git Bash”快捷方式上点击鼠标右键，然后选择“属性”，会弹出如下截图的提示框：</p><p><img src="http://img.blog.csdn.net/20170121165353158"></p><p>我们可以看到在“目标”后面的输入框中有操作的命令，在命令的最后是“–cd-to-home”，就是这条命令在快捷方式打开的时候切换到“/c/Users/Administrator”路径了。</p><p>假如，我们想把默认路径修改为“D:\android_workspace”，那我们需要操作两步：</p><p>1.将“目录”后面输入框中命令结尾部分去掉，即删掉“–cd-to-home”。</p><p>2.将“起始位置”后面的输入框中的内容修改为我们想要的默认路径“D:\android_workspace”（注意：这个路径是根据你自己代码工程的位置而定的）</p><p>修改之后的操作截图如下：</p><p><img src="http://img.blog.csdn.net/20170121165423783"></p><p>修改之后，点击“确定”，然后重新打开“Git Bash”，就会自动切换到我们想要的路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;在公司windows下用gitbash，每次打开都要切换到D盘指定目录，非常费时，网上搜了一下果真有对应方法&lt;/p&gt;
&lt;h4 id=&quot;参考&quot;
      
    
    </summary>
    
    
      <category term="git" scheme="http://www.jk-kj.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git提交请求免输入git服务器密码</title>
    <link href="http://www.jk-kj.com/2017/11/01/git%E6%8F%90%E4%BA%A4%E8%AF%B7%E6%B1%82%E5%85%8D%E8%BE%93%E5%85%A5git%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%86%E7%A0%81/"/>
    <id>http://www.jk-kj.com/2017/11/01/git提交请求免输入git服务器密码/</id>
    <published>2017-11-01T00:50:58.000Z</published>
    <updated>2018-01-16T00:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>每次百度这内容，都要花费我不少时间</p><h4 id="客户端初始化"><a href="#客户端初始化" class="headerlink" title="客户端初始化"></a>客户端初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;yourname&quot;  </div><div class="line">git config --global user.email &quot;your@email.com&quot;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;XXX@company.com&quot;</div></pre></td></tr></table></figure><p>在git服务器下的git主目录下面的.ssh文件下添加（修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">authorized_keys</div></pre></td></tr></table></figure></p><p>重新启动sshd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service sshd restart</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;每次百度这内容，都要花费我不少时间&lt;/p&gt;
&lt;h4 id=&quot;客户端初始化&quot;&gt;&lt;a href=&quot;#客户端初始化&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="git" scheme="http://www.jk-kj.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>记一次在vue中使用axios，参数没有序列化</title>
    <link href="http://www.jk-kj.com/2017/11/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8axios%EF%BC%8C%E5%8F%82%E6%95%B0%E6%B2%A1%E6%9C%89%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://www.jk-kj.com/2017/11/01/记一次在vue中使用axios，参数没有序列化/</id>
    <published>2017-10-31T23:22:16.000Z</published>
    <updated>2017-10-31T23:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>开始用vue写项目，可是用axios进行get操作没问题，进行post操作时，post的值始终没有传过来</p><p>直到搜索到“qs序列化”关键词，才发现其中的缘由</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>Kouss博客 <a href="http://kouss.com/3884.html" target="_blank" rel="external">http://kouss.com/3884.html</a></p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>设置了headers中Content-Type为application/x-www-form-urlencoded数据格式，post发起的请求仍为json类型，并没有序列化。<br>郁闷的是用JSON.stringify无效。</p><p><img src="http://s.kouss.com/wp-content/uploads/2017/01/f413b81288.png"></p><p>这个Form Data后台取不到数据，正常的Form Data数据应该是key：val<br>最终解决方法：使用qs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var qs = require(&apos;qs&apos;)</div><div class="line">Vue.prototype.$http = axios.create(&#123;</div><div class="line">    baseURL: &apos;http://chaozhi.hk&apos;,</div><div class="line">    timeout: 10000,</div><div class="line">    headers: &#123;&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;&#125;,</div><div class="line">    transformRequest: [function (data) &#123;</div><div class="line">        data = qs.stringify(data)</div><div class="line">        return data</div><div class="line">    &#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;开始用vue写项目，可是用axios进行get操作没问题，进行post操作时，post的值始终没有传过来&lt;/p&gt;
&lt;p&gt;直到搜索到“qs序列
      
    
    </summary>
    
    
      <category term="vue" scheme="http://www.jk-kj.com/tags/vue/"/>
    
      <category term="axios" scheme="http://www.jk-kj.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>vue选项生命周期钩子</title>
    <link href="http://www.jk-kj.com/2017/10/27/vue%E9%80%89%E9%A1%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/"/>
    <id>http://www.jk-kj.com/2017/10/27/vue选项生命周期钩子/</id>
    <published>2017-10-27T05:45:00.000Z</published>
    <updated>2017-11-05T09:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着 你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。<br><img src="https://cn.vuejs.org/images/lifecycle.png"></p><h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h4><pre><code>类型：Function</code></pre><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><p>类型：Function</p><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h4><p>类型：Function</p><p>详细：</p><p>在挂载开始之前被调用：相关的 render 函数首次被调用。<br>该钩子在服务器端渲染期间不被调用。</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><p>类型：Function</p><p>详细：</p><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><p>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mounted: function () &#123;</div><div class="line">      this.$nextTick(function () &#123;</div><div class="line">        // Code that will run only after the</div><div class="line">        // entire view has been rendered</div><div class="line">      &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>该钩子在服务器端渲染期间不被调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line">    this.$nextTick(() =&gt; &#123;</div><div class="line">        var dataComeinBar = echarts.init(document.getElementById(&apos;data_comein_bar&apos;));</div><div class="line"></div><div class="line">        var option = &#123;</div><div class="line">            ......</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        dataComeinBar.setOption(option);</div><div class="line">        window.addEventListener(&apos;resize&apos;, function () &#123;</div><div class="line">            dataComeinBar.resize();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h4><p>类型：Function</p><p>详细：</p><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</p><p>你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h4><p>类型：Function</p><p>详细：</p><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>注意 updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick 替换掉 updated：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">updated: function () &#123;</div><div class="line">  this.$nextTick(function () &#123;</div><div class="line">    // Code that will run only after the</div><div class="line">    // entire view has been re-rendered</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h4><p>类型：Function</p><p>详细：</p><p>keep-alive 组件激活时调用。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h4><p>类型：Function</p><p>详细：</p><p>keep-alive 组件停用时调用。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h4><p>类型：Function</p><p>详细：</p><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h4><p>类型：Function</p><p>详细：</p><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h4><p>2.5.0+ 新增</p><p>类型：(err: Error, vm: Component, info: string) =&gt; ?boolean</p><p>详细：</p><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生命周期钩子&quot;&gt;&lt;a href=&quot;#生命周期钩子&quot; class=&quot;headerlink&quot; title=&quot;生命周期钩子&quot;&gt;&lt;/a&gt;生命周期钩子&lt;/h3&gt;&lt;p&gt;所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着 你
      
    
    </summary>
    
    
      <category term="vue2" scheme="http://www.jk-kj.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue指令</title>
    <link href="http://www.jk-kj.com/2017/10/27/vue%E6%8C%87%E4%BB%A4/"/>
    <id>http://www.jk-kj.com/2017/10/27/vue指令/</id>
    <published>2017-10-27T00:16:58.000Z</published>
    <updated>2017-11-05T09:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>预期：string</p><p>更新元素的 textContent。如果要更新部分的 textContent ，需要使用  插值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;!-- 和下面的一样 --&gt;</div><div class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>预期：string</p><p>更新元素的 innerHTML 。注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译 。如果试图使用 v-html 组合模板，可以重新考虑是否通过使用组件来替代。</p><p>在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-html=&quot;html&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>预期：any</p><p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</div></pre></td></tr></table></figure></p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>预期：any</p><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><p>预期：any</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;</div><div class="line">  Now you see me</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else&gt;</div><div class="line">  Now you don&apos;t</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</div><div class="line">  A</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</div><div class="line">  B</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</div><div class="line">  C</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else&gt;</div><div class="line">  Not A/B/C</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>预期：Array | Object | number | string</p><p>基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 alias in expression ，为当前遍历的元素提供别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div v-for=&quot;item in items&quot;&gt;</div><div class="line">  &#123;&#123; item.text &#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>另外也可以为数组索引指定别名 (或者用于对象的键)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div v-for=&quot;(item, index) in items&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div v-for=&quot;(val, key) in object&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div v-for=&quot;(val, key, index) in object&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>缩写：@    【注意可缩写】</p><p>修饰符：</p><pre><code>.stop - 调用 event.stopPropagation()。.prevent - 调用 event.preventDefault()。.capture - 添加事件侦听器时使用 capture 模式。.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。.native - 监听组件根元素的原生事件。.once - 只触发一次回调。.left - (2.2.0) 只当点击鼠标左键时触发。.right - (2.2.0) 只当点击鼠标右键时触发。.middle - (2.2.0) 只当点击鼠标中键时触发。.passive - (2.3.0) 以 { passive: true } 模式添加侦听器</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 方法处理器 --&gt;</div><div class="line">&lt;button v-on:click=&quot;doThis&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 对象语法 (2.4.0+) --&gt;</div><div class="line">&lt;button v-on=&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 内联语句 --&gt;</div><div class="line">&lt;button v-on:click=&quot;doThat(&apos;hello&apos;, $event)&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 缩写 --&gt;</div><div class="line">&lt;button @click=&quot;doThis&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 停止冒泡 --&gt;</div><div class="line">&lt;button @click.stop=&quot;doThis&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 阻止默认行为 --&gt;</div><div class="line">&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 阻止默认行为，没有表达式 --&gt;</div><div class="line">&lt;form @submit.prevent&gt;&lt;/form&gt;</div><div class="line">&lt;!--  串联修饰符 --&gt;</div><div class="line">&lt;button @click.stop.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</div><div class="line">&lt;!-- 键修饰符，键别名 --&gt;</div><div class="line">&lt;input @keyup.enter=&quot;onEnter&quot;&gt;</div><div class="line">&lt;!-- 键修饰符，键代码 --&gt;</div><div class="line">&lt;input @keyup.13=&quot;onEnter&quot;&gt;</div><div class="line">&lt;!-- 点击回调只会触发一次 --&gt;</div><div class="line">&lt;button v-on:click.once=&quot;doThis&quot;&gt;&lt;/button&gt;</div></pre></td></tr></table></figure><p>在子组件上监听自定义事件 (当子组件触发“my-event”时将调用事件处理器)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;my-component @my-event=&quot;handleThis&quot;&gt;&lt;/my-component&gt;</div><div class="line">&lt;!-- 内联语句 --&gt;</div><div class="line">&lt;my-component @my-event=&quot;handleThis(123, $event)&quot;&gt;&lt;/my-component&gt;</div><div class="line">&lt;!-- 组件中的原生事件 --&gt;</div><div class="line">&lt;my-component @click.native=&quot;onClick&quot;&gt;&lt;/my-component&gt;</div></pre></td></tr></table></figure><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>缩写：:    【注意可缩写】<br>预期：any (with argument) | Object (without argument)</p><p>修饰符：</p><pre><code>.prop - 被用于绑定 DOM 属性 (property)。(差别在哪里？).camel - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持).sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 绑定一个属性 --&gt;</div><div class="line">&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</div><div class="line">&lt;!-- 缩写 --&gt;</div><div class="line">&lt;img :src=&quot;imageSrc&quot;&gt;</div><div class="line">&lt;!-- 内联字符串拼接 --&gt;</div><div class="line">&lt;img :src=&quot;&apos;/path/to/images/&apos; + fileName&quot;&gt;</div><div class="line">&lt;!-- class 绑定 --&gt;</div><div class="line">&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div :class=&quot;[classA, classB]&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div :class=&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</div><div class="line">&lt;!-- style 绑定 --&gt;</div><div class="line">&lt;div :style=&quot;&#123; fontSize: size + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div :style=&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;!-- 绑定一个有属性的对象 --&gt;</div><div class="line">&lt;div v-bind=&quot;&#123; id: someProp, &apos;other-attr&apos;: otherProp &#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</div><div class="line">&lt;div v-bind:text-content.prop=&quot;text&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</div><div class="line">&lt;my-component :prop=&quot;someThing&quot;&gt;&lt;/my-component&gt;</div><div class="line">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</div><div class="line">&lt;child-component v-bind=&quot;$props&quot;&gt;&lt;/child-component&gt;</div><div class="line">&lt;!-- XLink --&gt;</div><div class="line">&lt;svg&gt;&lt;a :xlink:special=&quot;foo&quot;&gt;&lt;/a&gt;&lt;/svg&gt;</div></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>预期：随表单控件类型不同而不同。</p><p>限制：</p><pre><code>&lt;input&gt;&lt;select&gt;&lt;textarea&gt;components</code></pre><p>修饰符：</p><pre><code>.lazy - 取代 input 监听 change 事件.number - 输入字符串转为数字.trim - 输入首尾空格过滤</code></pre><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>用法：</p><p>跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>用法：</p><p>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[v-cloak] &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;div v-cloak&gt;</div><div class="line">  &#123;&#123; message &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">不会显示，直到编译结束。</div></pre></td></tr></table></figure></p><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 单个元素 --&gt;</div><div class="line">&lt;span v-once&gt;This will never change: &#123;&#123;msg&#125;&#125;&lt;/span&gt;</div><div class="line">&lt;!-- 有子元素 --&gt;</div><div class="line">&lt;div v-once&gt;</div><div class="line">  &lt;h1&gt;comment&lt;/h1&gt;</div><div class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!-- 组件 --&gt;</div><div class="line">&lt;my-component v-once :comment=&quot;msg&quot;&gt;&lt;/my-component&gt;</div><div class="line">&lt;!-- `v-for` 指令--&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li v-for=&quot;i in list&quot; v-once&gt;&#123;&#123;i&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;v-text&quot;&gt;&lt;a href=&quot;#v-text&quot; class=&quot;headerlink&quot; title=&quot;v-text&quot;&gt;&lt;/a&gt;v-text&lt;/h4&gt;&lt;p&gt;预期：string&lt;/p&gt;
&lt;p&gt;更新元素的 textContent。如果要更新部分的 textConten
      
    
    </summary>
    
    
      <category term="vue2" scheme="http://www.jk-kj.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue选项数据</title>
    <link href="http://www.jk-kj.com/2017/10/27/vue%E9%80%89%E9%A1%B9%E6%95%B0%E6%8D%AE/"/>
    <id>http://www.jk-kj.com/2017/10/27/vue选项数据/</id>
    <published>2017-10-26T22:47:41.000Z</published>
    <updated>2017-11-05T09:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>初级理解：对象必须是纯粹的对象(含有零个或多个的key/value对)，这里面的数据最好都是在视图层显示的数据（静态变量）<br>中级理解：<br>高级理解：</p><p>其他：<br>如果说不是在视图层展示的变量。可以定义在外面或者放在vm对象上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let abc = &apos;&apos;  </div><div class="line">export default &#123;  </div><div class="line">    data() &#123;  </div><div class="line">        return &#123;  </div><div class="line">            bar: &apos;bar&apos;  </div><div class="line">        &#125;  </div><div class="line">    &#125;,  </div><div class="line">    methods: &#123;  </div><div class="line">        testFn() &#123;  </div><div class="line">            // abc  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>初级理解：props 可以是数组或对象，用于接收来自父组件的数据。<br>中级理解：组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。<br>高级理解：</p><p>其他：</p><p>子组件要显式地用 props 选项声明它预期的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.component(&apos;child&apos;, &#123;</div><div class="line">  // 声明 props</div><div class="line">  props: [&apos;message&apos;],</div><div class="line">  // 就像 data 一样，prop 也可以在模板中使用</div><div class="line">  // 同样也可以在 vm 实例中通过 this.message 来使用</div><div class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>然后我们可以这样向它传入一个普通字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</div></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello!</div></pre></td></tr></table></figure></p><h3 id="propsData"><a href="#propsData" class="headerlink" title="propsData"></a>propsData</h3><p>简单理解:创建实例时传递 props。主要作用是方便测试。(无父级时)</p><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>简单理解：computed，计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。不过计算属性也用函数来替代。（动态变量）</p><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p> methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>简单理解：监听data里的值的变化</p><p>官方例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    a: 1,</div><div class="line">    b: 2,</div><div class="line">    c: 3,</div><div class="line">    d: 4</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    a: function (val, oldVal) &#123;</div><div class="line">      console.log(&apos;new: %s, old: %s&apos;, val, oldVal)</div><div class="line">    &#125;,</div><div class="line">    // 方法名</div><div class="line">    b: &apos;someMethod&apos;,</div><div class="line">    // 深度 watcher</div><div class="line">    c: &#123;</div><div class="line">      handler: function (val, oldVal) &#123; /* ... */ &#125;,</div><div class="line">      deep: true</div><div class="line">    &#125;,</div><div class="line">    // 该回调将会在侦听开始之后被立即调用</div><div class="line">    d: &#123;</div><div class="line">      handler: function (val, oldVal) &#123; /* ... */ &#125;,</div><div class="line">      immediate: true</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">vm.a = 2 // =&gt; new: 2, old: 1</div></pre></td></tr></table></figure><p>一个时间选择器更改的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var v_assetManage_controller = new Vue(&#123;  </div><div class="line">    el: &apos;.LSee-index&apos;,  </div><div class="line">    data: &#123;  </div><div class="line">        trendQueryTimeCtr: &#123;  </div><div class="line">            startTime: &apos;&apos;,  </div><div class="line">            endTime: &apos;&apos;  </div><div class="line">        &#125;  </div><div class="line">    &#125;,  </div><div class="line">    ready: function() &#123;  </div><div class="line">        //  </div><div class="line">    &#125;,  </div><div class="line">    methods: &#123;  </div><div class="line">        queryTrendData: function()&#123;  </div><div class="line">            //do some here  </div><div class="line">        &#125;  </div><div class="line">    &#125;,  </div><div class="line">    watch: &#123;  </div><div class="line">        &apos;trendQueryTimeCtr.startTime&apos;: &apos;queryTrendData&apos;,  </div><div class="line">        &apos;trendQueryTimeCtr.endTime&apos;: &apos;queryTrendData&apos;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;data&quot;&gt;&lt;a href=&quot;#data&quot; class=&quot;headerlink&quot; title=&quot;data&quot;&gt;&lt;/a&gt;data&lt;/h3&gt;&lt;p&gt;初级理解：对象必须是纯粹的对象(含有零个或多个的key/value对)，这里面的数据最好都是在视图层显示的数据（静态变量）&lt;
      
    
    </summary>
    
    
      <category term="vue2" scheme="http://www.jk-kj.com/tags/vue2/"/>
    
  </entry>
  
</feed>
